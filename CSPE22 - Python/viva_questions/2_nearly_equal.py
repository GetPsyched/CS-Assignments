def nearly_equal(a: str, b: str) -> bool:
    """Return a boolean stating if the given strings are nearly equal or not"""
    # Check if the given strings differ in length by more than 1
    if abs(len(a) - len(b)) > 1:
        return False

    count = 0
    # Loop through both strings at the same time
    # and increment the `count` each time a different character is found
    for char_a, char_b in zip(a, b):
        if char_a != char_b:
            count += 1
    
    # The strings are nearly equal if the count is either 0 or 1
    # 0 means the strings are exactly equal (if the length is same)
    # 1 means the strings have one mutation
    equal = True if count in (0, 1) else False
    return equal

def main():
    """Question 2

    WAF nearly_equal(a, b) -> bool to test whether 2 strings are nearly equal \
    or not. Two strings `a` and `b` are nearly equal when `a` can be generated by \
    a single mutation in `b`. A mutation, here, occurs when a single \
    character has changed.
    """
    # Get input from the user
    a = input('Enter the first string --> ')
    b = input('Enter the second string --> ')

    # Check if the given strings are nearly equal or not
    if nearly_equal(a, b):
        print('The given strings are nearly equal!')
    else:
        print('The given strings are NOT nearly equal!')

# Run the main function if this file is directly executed (i.e., not imported)
if __name__ == '__main__':
    main()
